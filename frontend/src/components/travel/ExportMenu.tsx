import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import { 
  Download, 
  FileText, 
  FileJson, 
  FileImage,
  Printer,
  Mail,
  ChevronDown
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ExportMenuProps {
  travelPlan: {
    answer: string;
    query: string;
    timestamp: string;
    processingTime?: number;
  };
  className?: string;
}

const ExportMenu = ({ travelPlan, className }: ExportMenuProps) => {
  const [isExporting, setIsExporting] = useState(false);
  const { toast } = useToast();

  const generateFilename = (extension: string) => {
    const date = new Date().toISOString().split('T')[0];
    const sanitizedQuery = travelPlan.query
      .replace(/[^a-zA-Z0-9\s]/g, '')
      .replace(/\s+/g, '-')
      .toLowerCase()
      .substring(0, 30);
    return `travel-plan-${sanitizedQuery}-${date}.${extension}`;
  };

  const exportAsText = () => {
    try {
      setIsExporting(true);
      
      const content = `üåç AI TRAVEL PLAN
${'-'.repeat(50)}

Query: ${travelPlan.query}
Generated: ${new Date(travelPlan.timestamp).toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}
Processing Time: ${travelPlan.processingTime ? `${(travelPlan.processingTime / 1000).toFixed(1)}s` : 'N/A'}

${'-'.repeat(50)}
ITINERARY
${'-'.repeat(50)}

${travelPlan.answer}

${'-'.repeat(50)}
Generated by AI Travel Planner
‚ö†Ô∏è  Please verify all information before traveling
`;

      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = generateFilename('txt');
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Text file exported!",
        description: "Your travel plan has been downloaded as a text file.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your travel plan.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const exportAsJSON = () => {
    try {
      setIsExporting(true);
      
      const jsonData = {
        metadata: {
          query: travelPlan.query,
          timestamp: travelPlan.timestamp,
          processingTime: travelPlan.processingTime,
          generated_by: "AI Travel Planner",
          format_version: "1.0"
        },
        content: {
          raw_answer: travelPlan.answer,
          formatted_plan: travelPlan.answer.split('\n').filter(line => line.trim())
        },
        export_info: {
          exported_at: new Date().toISOString(),
          file_format: "json"
        }
      };

      const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = generateFilename('json');
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "JSON file exported!",
        description: "Your travel plan has been downloaded as a JSON file.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your travel plan.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const exportAsPDF = () => {
    try {
      setIsExporting(true);
      
      // Process markdown content to HTML with enhanced styling
      const processMarkdownToHTML = (markdown: string) => {
        return markdown
          // Headers
          .replace(/^# (.+)$/gm, '<h1 class="markdown-h1">$1</h1>')
          .replace(/^## (.+)$/gm, '<h2 class="markdown-h2">$1</h2>')
          .replace(/^### (.+)$/gm, '<h3 class="markdown-h3">$1</h3>')
          .replace(/^#### (.+)$/gm, '<h4 class="markdown-h4">$1</h4>')
          
          // Bold and italic
          .replace(/\*\*(.+?)\*\*/g, '<strong class="markdown-strong">$1</strong>')
          .replace(/\*(.+?)\*/g, '<em class="markdown-em">$1</em>')
          
          // Code blocks
          .replace(/```[\s\S]*?```/g, '<pre class="markdown-code-block">$&</pre>')
          .replace(/`([^`]+)`/g, '<code class="markdown-code">$1</code>')
          
          // Lists
          .replace(/^[\s]*[-\*\+] (.+)$/gm, '<li class="markdown-li">$1</li>')
          .replace(/^[\s]*\d+\. (.+)$/gm, '<li class="markdown-li-numbered">$1</li>')
          
          // Blockquotes
          .replace(/^> (.+)$/gm, '<blockquote class="markdown-blockquote">$1</blockquote>')
          
          // Line breaks
          .replace(/\n\n/g, '</p><p class="markdown-p">')
          .replace(/\n/g, '<br>');
      };

      // Create a beautifully formatted HTML version matching the markdown styling
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Travel Plan - ${travelPlan.query}</title>
          <meta charset="UTF-8">
          <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üåç</text></svg>">
          <style>
            * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
            }
            
            body { 
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
              line-height: 1.6;
              color: #374151;
              max-width: 800px;
              margin: 0 auto;
              padding: 40px 20px;
              background: #fff;
            }
            
            .header-section {
              background: linear-gradient(135deg, #10b981 0%, #3b82f6 50%, #8b5cf6 100%);
              padding: 40px;
              border-radius: 16px;
              margin-bottom: 40px;
              text-align: center;
              color: white;
              position: relative;
              overflow: hidden;
            }
            
            .main-title {
              font-size: 32px;
              font-weight: bold;
              margin-bottom: 12px;
              position: relative;
              z-index: 1;
            }
            
            .subtitle {
              font-size: 18px;
              opacity: 0.9;
              position: relative;
              z-index: 1;
            }
            
            .metadata-section {
              background: linear-gradient(135deg, #dcfce7 0%, #dbeafe 50%, #f3e8ff 100%);
              padding: 32px;
              border-radius: 12px;
              margin-bottom: 40px;
              border: 2px solid #10b981;
              position: relative;
            }
            
            .metadata-title {
              font-size: 20px;
              font-weight: bold;
              color: #065f46;
              margin-bottom: 20px;
              display: flex;
              align-items: center;
              gap: 8px;
            }
            
            .metadata-grid {
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
              gap: 20px;
              margin-bottom: 20px;
            }
            
            .metadata-item {
              display: flex;
              flex-direction: column;
            }
            
            .metadata-label {
              font-weight: 600;
              color: #4b5563;
              font-size: 14px;
              margin-bottom: 4px;
            }
            
            .metadata-value {
              color: #1f2937;
              font-size: 16px;
            }
            
            .query-section {
              background: transparent;
              padding: 20px;
              border-radius: 8px;
              border: 1px solid rgba(16, 185, 129, 0.3);
              margin-top: 20px;
              background: rgba(16, 185, 129, 0.05);
            }
            
            .query-text {
              font-style: italic;
              color: #4b5563;
              font-size: 16px;
            }
            
            .content-section {
              background: white;
              border-radius: 12px;
              border: 1px solid #e5e7eb;
              box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
              overflow: hidden;
              margin-bottom: 40px;
            }
            
            .content-wrapper {
              padding: 40px;
              line-height: 1.8;
            }
            
            /* Markdown styling to match the React component */
            .markdown-h1 {
              font-size: 32px;
              font-weight: bold;
              background: linear-gradient(135deg, #2563eb, #8b5cf6);
              -webkit-background-clip: text;
              -webkit-text-fill-color: transparent;
              background-clip: text;
              text-align: center;
              margin: 32px 0;
              padding: 24px;
              border-radius: 12px;
              background-color: rgba(59, 130, 246, 0.1);
            }
            
            .markdown-h2 {
              font-size: 24px;
              font-weight: bold;
              color: #1f2937;
              margin: 40px 0 24px 0;
              padding-bottom: 8px;
              border-bottom: 2px solid #e5e7eb;
              display: flex;
              align-items: center;
              gap: 12px;
            }
            
            .markdown-h2::before {
              content: '';
              width: 8px;
              height: 32px;
              background: linear-gradient(135deg, #3b82f6, #2563eb);
              border-radius: 4px;
            }
            
            .markdown-h3 {
              font-size: 20px;
              font-weight: 600;
              color: #374151;
              margin: 32px 0 16px 0;
              padding: 12px 16px;
              background: linear-gradient(135deg, #f0fdf4, #dbeafe);
              border-radius: 8px;
              border-left: 4px solid #10b981;
            }
            
            .markdown-h4 {
              font-size: 18px;
              font-weight: 600;
              color: #4b5563;
              margin: 24px 0 12px 0;
              display: flex;
              align-items: center;
              gap: 8px;
            }
            
            .markdown-h4::before {
              content: '';
              width: 8px;
              height: 8px;
              background: #f59e0b;
              border-radius: 50%;
            }
            
            .markdown-p {
              color: #374151;
              margin-bottom: 16px;
              font-size: 16px;
              line-height: 1.8;
            }
            
            .markdown-li {
              display: flex;
              align-items: flex-start;
              gap: 12px;
              background: rgba(249, 250, 251, 0.5);
              padding: 12px;
              border-radius: 8px;
              margin-bottom: 12px;
              color: #374151;
              line-height: 1.6;
            }
            
            .markdown-li::before {
              content: '';
              width: 8px;
              height: 8px;
              background: #3b82f6;
              border-radius: 50%;
              margin-top: 8px;
              flex-shrink: 0;
            }
            
            .markdown-li-numbered {
              background: rgba(249, 250, 251, 0.5);
              padding: 12px;
              border-radius: 8px;
              margin-bottom: 12px;
              color: #374151;
              line-height: 1.6;
            }
            
            .markdown-strong {
              font-weight: bold;
              color: #1f2937;
            }
            
            .markdown-em {
              font-style: italic;
              color: #2563eb;
              font-weight: 500;
            }
            
            .markdown-code {
              background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
              padding: 4px 8px;
              border-radius: 4px;
              font-family: 'Monaco', 'Consolas', 'Courier New', monospace;
              font-size: 14px;
              color: #1f2937;
              border: 1px solid #d1d5db;
            }
            
            .markdown-code-block {
              background: linear-gradient(135deg, #1f2937, #111827);
              color: #f9fafb;
              padding: 24px;
              border-radius: 12px;
              font-family: 'Monaco', 'Consolas', 'Courier New', monospace;
              font-size: 14px;
              margin: 24px 0;
              overflow-x: auto;
              border: 1px solid #374151;
            }
            
            .markdown-blockquote {
              border-left: 4px solid #10b981;
              background: linear-gradient(135deg, #f0fdf4, #fef3c7);
              padding: 20px 24px;
              font-style: italic;
              color: #374151;
              margin: 24px 0;
              border-radius: 0 8px 8px 0;
              position: relative;
            }
            
            .markdown-blockquote::before {
              content: '"';
              position: absolute;
              top: 8px;
              left: 8px;
              color: #10b981;
              font-size: 24px;
              opacity: 0.5;
            }
            
            .footer-section {
              background: #fef3c7;
              border: 2px solid #f59e0b;
              border-radius: 12px;
              padding: 24px;
              text-align: center;
              color: #92400e;
              font-size: 14px;
              line-height: 1.6;
            }
            
            .footer-section strong {
              color: #78350f;
            }
            
            hr {
              margin: 32px 0;
              border: none;
              height: 2px;
              background: linear-gradient(135deg, transparent, #3b82f6, transparent);
              border-radius: 1px;
            }
            
            @media print {
              body {
                margin: 0;
                padding: 20px;
                font-size: 12px;
              }
              
              .header-section {
                background: #3b82f6 !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
              }
              
              .metadata-section {
                background: #f0fdf4 !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
              }
              
              .content-section {
                box-shadow: none;
                border: 1px solid #e5e7eb;
              }
              
              .markdown-h1 {
                background: #3b82f6 !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
                color: white !important;
              }
              
              .markdown-h2::before {
                background: #3b82f6 !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
              }
              
              .markdown-h3 {
                background: #f0fdf4 !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
              }
              
              .markdown-li {
                background: #f9fafb !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
              }
              
              .markdown-blockquote {
                background: #f0fdf4 !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
              }
              
              .footer-section {
                background: #fef3c7 !important;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
              }
            }
          </style>
        </head>
        <body>
          <div class="header-section">
            <h1 class="main-title">üåç AI Travel Plan</h1>
            <p class="subtitle">Your Personalized Journey Awaits</p>
          </div>
          
          <div class="metadata-section">
            <div class="metadata-title">
              ‚úÖ Plan Details
            </div>
            
            <div class="metadata-grid">
              <div class="metadata-item">
                <span class="metadata-label">Generated:</span>
                <span class="metadata-value">
                  ${new Date(travelPlan.timestamp).toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </span>
                <span class="metadata-value" style="font-size: 12px; color: #6b7280;">
                  at ${new Date(travelPlan.timestamp).toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </span>
              </div>
              
              <div class="metadata-item">
                <span class="metadata-label">Processing Time:</span>
                <span class="metadata-value">
                  ${travelPlan.processingTime ? `${(travelPlan.processingTime / 1000).toFixed(1)}s` : 'N/A'}
                </span>
              </div>
              
              <div class="metadata-item">
                <span class="metadata-label">Created by:</span>
                <span class="metadata-value">AI Travel Agent</span>
              </div>
            </div>
            
            <div class="query-section">
              <div class="metadata-label" style="margin-bottom: 8px;">Your Query:</div>
              <div class="query-text">"${travelPlan.query}"</div>
            </div>
          </div>
          
          <div class="content-section">
            <div class="content-wrapper">
              <p class="markdown-p">${processMarkdownToHTML(travelPlan.answer)}</p>
            </div>
          </div>
          
          <div class="footer-section">
            <strong>‚ö†Ô∏è Important:</strong> This travel plan was generated by AI. Please verify all information, 
            especially prices, operating hours, and travel requirements before your trip.
          </div>
        </body>
        </html>
      `;

      // Directly open print dialog without saving HTML file
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(htmlContent);
        printWindow.document.close();
        printWindow.focus();
        
        // Wait for content to load then print
        setTimeout(() => {
          printWindow.print();
          // Close the window after printing
          setTimeout(() => {
            printWindow.close();
          }, 1000);
        }, 1000);
      }

      toast({
        title: "PDF export ready!",
        description: "Print dialog opened. Choose 'Save as PDF' to create your PDF.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error preparing your travel plan for PDF export.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const shareViaEmail = () => {
    const subject = encodeURIComponent(`My Travel Plan: ${travelPlan.query}`);
    const body = encodeURIComponent(`
Hi!

I've created a travel plan using AI and wanted to share it with you:

Query: ${travelPlan.query}
Generated: ${new Date(travelPlan.timestamp).toLocaleDateString()}

${travelPlan.answer}

---
Generated by AI Travel Planner
Please verify all information before traveling.
    `);
    
    window.open(`mailto:?subject=${subject}&body=${body}`);
    
    toast({
      title: "Email client opened!",
      description: "Your travel plan has been prepared for email sharing.",
    });
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" disabled={isExporting} className={className}>
          <Download className="w-4 h-4 mr-2" />
          Export
          <ChevronDown className="w-4 h-4 ml-2" />
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent align="end" className="w-56">
        <DropdownMenuLabel className="flex items-center gap-2">
          <Download className="w-4 h-4" />
          Export Options
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        
        <DropdownMenuItem onClick={exportAsText} className="flex items-center gap-2">
          <FileText className="w-4 h-4" />
          <div>
            <div className="font-medium">Text File (.txt)</div>
            <div className="text-xs text-muted-foreground">Simple text format</div>
          </div>
        </DropdownMenuItem>

        <DropdownMenuItem onClick={exportAsPDF} className="flex items-center gap-2">
          <Printer className="w-4 h-4" />
          <div>
            <div className="font-medium">PDF Document</div>
            <div className="text-xs text-muted-foreground">Print-ready format</div>
          </div>
        </DropdownMenuItem>

        <DropdownMenuItem onClick={exportAsJSON} className="flex items-center gap-2">
          <FileJson className="w-4 h-4" />
          <div>
            <div className="font-medium">JSON Data (.json)</div>
            <div className="text-xs text-muted-foreground">Structured data format</div>
          </div>
        </DropdownMenuItem>

        <DropdownMenuSeparator />

        <DropdownMenuItem onClick={shareViaEmail} className="flex items-center gap-2">
          <Mail className="w-4 h-4" />
          <div>
            <div className="font-medium">Share via Email</div>
            <div className="text-xs text-muted-foreground">Open email client</div>
          </div>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default ExportMenu;
