import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import { 
  Download, 
  FileText, 
  FileJson, 
  FileImage,
  Printer,
  Mail,
  ChevronDown
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ExportMenuProps {
  travelPlan: {
    answer: string;
    query: string;
    timestamp: string;
    processingTime?: number;
  };
  className?: string;
}

const ExportMenu = ({ travelPlan, className }: ExportMenuProps) => {
  const [isExporting, setIsExporting] = useState(false);
  const { toast } = useToast();

  const generateFilename = (extension: string) => {
    const date = new Date().toISOString().split('T')[0];
    const sanitizedQuery = travelPlan.query
      .replace(/[^a-zA-Z0-9\s]/g, '')
      .replace(/\s+/g, '-')
      .toLowerCase()
      .substring(0, 30);
    return `travel-plan-${sanitizedQuery}-${date}.${extension}`;
  };

  const exportAsText = () => {
    try {
      setIsExporting(true);
      
      const content = `üåç AI TRAVEL PLAN
${'-'.repeat(50)}

Query: ${travelPlan.query}
Generated: ${new Date(travelPlan.timestamp).toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}
Processing Time: ${travelPlan.processingTime ? `${(travelPlan.processingTime / 1000).toFixed(1)}s` : 'N/A'}

${'-'.repeat(50)}
ITINERARY
${'-'.repeat(50)}

${travelPlan.answer}

${'-'.repeat(50)}
Generated by AI Travel Planner
‚ö†Ô∏è  Please verify all information before traveling
`;

      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = generateFilename('txt');
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Text file exported!",
        description: "Your travel plan has been downloaded as a text file.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your travel plan.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const exportAsJSON = () => {
    try {
      setIsExporting(true);
      
      const jsonData = {
        metadata: {
          query: travelPlan.query,
          timestamp: travelPlan.timestamp,
          processingTime: travelPlan.processingTime,
          generated_by: "AI Travel Planner",
          format_version: "1.0"
        },
        content: {
          raw_answer: travelPlan.answer,
          formatted_plan: travelPlan.answer.split('\n').filter(line => line.trim())
        },
        export_info: {
          exported_at: new Date().toISOString(),
          file_format: "json"
        }
      };

      const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = generateFilename('json');
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "JSON file exported!",
        description: "Your travel plan has been downloaded as a JSON file.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your travel plan.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const exportAsPDF = () => {
    try {
      setIsExporting(true);
      
      // Create a formatted HTML version for printing
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Travel Plan</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            .header { border-bottom: 3px solid #2563eb; padding-bottom: 20px; margin-bottom: 30px; }
            .title { color: #2563eb; font-size: 28px; margin: 0; }
            .subtitle { color: #64748b; font-size: 16px; margin: 10px 0; }
            .metadata { background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0; }
            .content { white-space: pre-wrap; line-height: 1.8; }
            .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #e2e8f0; font-size: 12px; color: #64748b; }
            @media print { 
              body { margin: 20px; } 
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1 class="title">üåç AI Travel Plan</h1>
            <p class="subtitle">Personalized Itinerary</p>
          </div>
          
          <div class="metadata">
            <strong>Query:</strong> ${travelPlan.query}<br>
            <strong>Generated:</strong> ${new Date(travelPlan.timestamp).toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })}<br>
            <strong>Processing Time:</strong> ${travelPlan.processingTime ? `${(travelPlan.processingTime / 1000).toFixed(1)} seconds` : 'N/A'}
          </div>
          
          <div class="content">${travelPlan.answer.replace(/\n/g, '<br>')}</div>
          
          <div class="footer">
            Generated by AI Travel Planner | Please verify all information before traveling
          </div>
        </body>
        </html>
      `;

      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(htmlContent);
        printWindow.document.close();
        printWindow.focus();
        
        // Wait for content to load then print
        setTimeout(() => {
          printWindow.print();
        }, 500);
      }

      toast({
        title: "PDF export initiated!",
        description: "Print dialog opened. Choose 'Save as PDF' as your destination.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error preparing your travel plan for PDF export.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const shareViaEmail = () => {
    const subject = encodeURIComponent(`My Travel Plan: ${travelPlan.query}`);
    const body = encodeURIComponent(`
Hi!

I've created a travel plan using AI and wanted to share it with you:

Query: ${travelPlan.query}
Generated: ${new Date(travelPlan.timestamp).toLocaleDateString()}

${travelPlan.answer}

---
Generated by AI Travel Planner
Please verify all information before traveling.
    `);
    
    window.open(`mailto:?subject=${subject}&body=${body}`);
    
    toast({
      title: "Email client opened!",
      description: "Your travel plan has been prepared for email sharing.",
    });
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" disabled={isExporting} className={className}>
          <Download className="w-4 h-4 mr-2" />
          Export
          <ChevronDown className="w-4 h-4 ml-2" />
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent align="end" className="w-56">
        <DropdownMenuLabel className="flex items-center gap-2">
          <Download className="w-4 h-4" />
          Export Options
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        
        <DropdownMenuItem onClick={exportAsText} className="flex items-center gap-2">
          <FileText className="w-4 h-4" />
          <div>
            <div className="font-medium">Text File (.txt)</div>
            <div className="text-xs text-muted-foreground">Simple text format</div>
          </div>
        </DropdownMenuItem>

        <DropdownMenuItem onClick={exportAsPDF} className="flex items-center gap-2">
          <Printer className="w-4 h-4" />
          <div>
            <div className="font-medium">PDF Document</div>
            <div className="text-xs text-muted-foreground">Print-ready format</div>
          </div>
        </DropdownMenuItem>

        <DropdownMenuItem onClick={exportAsJSON} className="flex items-center gap-2">
          <FileJson className="w-4 h-4" />
          <div>
            <div className="font-medium">JSON Data (.json)</div>
            <div className="text-xs text-muted-foreground">Structured data format</div>
          </div>
        </DropdownMenuItem>

        <DropdownMenuSeparator />

        <DropdownMenuItem onClick={shareViaEmail} className="flex items-center gap-2">
          <Mail className="w-4 h-4" />
          <div>
            <div className="font-medium">Share via Email</div>
            <div className="text-xs text-muted-foreground">Open email client</div>
          </div>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default ExportMenu;
